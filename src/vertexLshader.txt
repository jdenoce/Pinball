attribute vec4 v_position;
attribute vec2 v_texcoord;
attribute vec3 normal;


varying vec2 texcoord; 
varying vec4 colorV;  
     
uniform mat4 projectionMatrix; 
uniform mat4 viewMatrix; 
uniform mat4 modelMatrix; 


// light and material properties
uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;


uniform vec4 LightPosition;
uniform float Shininess;


uniform float ball;

void main(void)
{
vec4 ambient = AmbientProduct;
vec4 diffuse, specular;
vec3 Tlight;


    vec4 Tdiffuse, Tspecular;
    Tlight = LightPosition.xyz;


    // Transform vertex  position into eye coordinates
    vec3 pos = ((viewMatrix * modelMatrix) * v_position).xyz;
	
    vec3 L = normalize( Tlight - pos );
    vec3 E = normalize( -pos );
    vec3 H = normalize( L + E );

    // Transform vertex normal into eye coordinates   vec4(normal, 0.0)
    vec3 N = normalize( (viewMatrix * modelMatrix) * vec4(normal, 0.0) ).xyz;

    // Compute terms in the illumination equation

    float Kd = max( dot(L, N), 0.0 );
    Tdiffuse = Kd*DiffuseProduct;
    float Ks = pow( max(dot(N, H), 0.0), Shininess );
    Tspecular = Ks * SpecularProduct;
    if( dot(L, N) < 0.0 )  specular = vec4(0.0, 0.0, 0.0, 1.0); 

    diffuse += Tdiffuse;
    specular += Tspecular;

    gl_Position = (projectionMatrix * viewMatrix * modelMatrix) * v_position;

    texcoord = v_texcoord;
    colorV = ambient + diffuse + specular;
    colorV.a = 1.0;

}
